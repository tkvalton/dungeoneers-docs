{"0": {
    "doc": 404,
    "title": "404",
    "content": " ",
    "url": "/dungeoneers-docs/404.html",
    
    "relUrl": "/404.html"
  },"1": {
    "doc": 404,
    "title": "Page not found :(",
    "content": "The requested page could not be found. Return to home page . ",
    "url": "/dungeoneers-docs/404.html",
    
    "relUrl": "/404.html"
  },"2": {
    "doc": 404,
    "title": 404,
    "content": " ",
    "url": "/dungeoneers-docs/404.html",
    
    "relUrl": "/404.html"
  },"3": {
    "doc": "About",
    "title": "About",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com . You can find the source code for Minima at GitHub: jekyll / minima . You can find the source code for Jekyll at GitHub: jekyll / jekyll . ",
    "url": "/dungeoneers-docs/about/",
    
    "relUrl": "/about/"
  },"4": {
    "doc": "Active Ability",
    "title": "Active Ability",
    "content": " ",
    "url": "/dungeoneers-docs/systems/abilities-effects/ability/active-ability",
    
    "relUrl": "/systems/abilities-effects/ability/active-ability"
  },"5": {
    "doc": "Attacking State",
    "title": "Attacking State",
    "content": "Inherits: State . ",
    "url": "/dungeoneers-docs/systems/entities/ai/attacking-state",
    
    "relUrl": "/systems/entities/ai/attacking-state"
  },"6": {
    "doc": "Attacking State",
    "title": "Description",
    "content": "AttackingState represents the state when an entity is actively attacking a target. It manages the attack timing and transitions to other states based on conditions. Key features: . | Controls the entity’s attack cycle using a timer | Manages transitions to other states (e.g., dead, target search, chasing) | Handles the entity’s orientation towards the target | . A timer use to call the entity to attack . ",
    "url": "/dungeoneers-docs/systems/entities/ai/attacking-state#description",
    
    "relUrl": "/systems/entities/ai/attacking-state#description"
  },"7": {
    "doc": "Boss Class",
    "title": "Boss Entity Class",
    "content": "Inherits: Entity . ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/boss#boss-entity-class",
    
    "relUrl": "/systems/entities/entity-class/boss#boss-entity-class"
  },"8": {
    "doc": "Boss Class",
    "title": "Boss Class",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/boss",
    
    "relUrl": "/systems/entities/entity-class/boss"
  },"9": {
    "doc": "Chasing State",
    "title": "Chasing State",
    "content": "Inherits: State . ",
    "url": "/dungeoneers-docs/systems/entities/ai/chasing-state",
    
    "relUrl": "/systems/entities/ai/chasing-state"
  },"10": {
    "doc": "Chasing State",
    "title": "Description",
    "content": "ChasingState represents the state when an entity is pursuing a target. It manages the entity’s movement towards the target and transitions to other states based on conditions. Key features: . | Updates the entity’s navigation target to follow the current target | Manages transitions to other states (e.g., dead, target search, attacking) | Handles the desired distance for attacking | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/chasing-state#description",
    
    "relUrl": "/systems/entities/ai/chasing-state#description"
  },"11": {
    "doc": "Companion Ability Container",
    "title": "Companion Ability Container Class",
    "content": "Inherits: AbilityContainer . ",
    "url": "/dungeoneers-docs/systems/entities/ability-container/companion-ability-container#companion-ability-container-class",
    
    "relUrl": "/systems/entities/ability-container/companion-ability-container#companion-ability-container-class"
  },"12": {
    "doc": "Companion Ability Container",
    "title": "Description",
    "content": "CompanionAbilityContainer manages abilities for companion entities in the game. It extends the base AbilityContainer to provide more complex ability management, including different types of abilities (basic, active, passive) and keybind mapping. Key features: . | Manages different types of abilities (basic, rotational, major, passive) | Handles ability slot mapping for keybinds | Provides methods for applying passive effects and refreshing active abilities | Allows enabling/disabling of passive abilities | . ",
    "url": "/dungeoneers-docs/systems/entities/ability-container/companion-ability-container#description",
    
    "relUrl": "/systems/entities/ability-container/companion-ability-container#description"
  },"13": {
    "doc": "Companion Ability Container",
    "title": "Companion Ability Container",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/ability-container/companion-ability-container",
    
    "relUrl": "/systems/entities/ability-container/companion-ability-container"
  },"14": {
    "doc": "Companion Class",
    "title": "Companion Entity Class",
    "content": "Inherits: Entity . ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/companion#companion-entity-class",
    
    "relUrl": "/systems/entities/entity-class/companion#companion-entity-class"
  },"15": {
    "doc": "Companion Class",
    "title": "Companion Class",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/companion",
    
    "relUrl": "/systems/entities/entity-class/companion"
  },"16": {
    "doc": "dead State",
    "title": "Chasing State",
    "content": "Inherits: State . ",
    "url": "/dungeoneers-docs/systems/entities/ai/dead-state#chasing-state",
    
    "relUrl": "/systems/entities/ai/dead-state#chasing-state"
  },"17": {
    "doc": "dead State",
    "title": "Description",
    "content": "DeadState represents the state when an entity has been defeated. It manages the entity’s death animation and prevents further actions until revival. Key features: . | Plays the death animation | Stops all movement and actions | Handles potential revival transitions | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/dead-state#description",
    
    "relUrl": "/systems/entities/ai/dead-state#description"
  },"18": {
    "doc": "dead State",
    "title": "dead State",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/ai/dead-state",
    
    "relUrl": "/systems/entities/ai/dead-state"
  },"19": {
    "doc": "Falling State",
    "title": "Falling State",
    "content": "Inherits: MovementState . ",
    "url": "/dungeoneers-docs/systems/entities/ai/falling-state",
    
    "relUrl": "/systems/entities/ai/falling-state"
  },"20": {
    "doc": "Falling State",
    "title": "Description",
    "content": "FallingState represents the state when an entity is in mid-air, typically after walking off an edge. It manages the entity’s falling animation and transition back to ground-based states. Key features: . | Plays the falling animation | Applies gravity to the entity | Manages transitions to ground-based states when landing | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/falling-state#description",
    
    "relUrl": "/systems/entities/ai/falling-state#description"
  },"21": {
    "doc": "following State",
    "title": "Following State",
    "content": "Inherits: State . ",
    "url": "/dungeoneers-docs/systems/entities/ai/following-state#following-state",
    
    "relUrl": "/systems/entities/ai/following-state#following-state"
  },"22": {
    "doc": "following State",
    "title": "Description",
    "content": "FollowingState represents the state when an entity is following another entity or a specific position. It’s typically used for companions or pets that need to stay close to their owner or designated position. Key features: . | Updates the entity’s navigation target to follow the designated position | Manages transitions to other states based on combat status or proximity to target | Handles different following behaviors for companions and pets | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/following-state#description",
    
    "relUrl": "/systems/entities/ai/following-state#description"
  },"23": {
    "doc": "following State",
    "title": "following State",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/ai/following-state",
    
    "relUrl": "/systems/entities/ai/following-state"
  },"24": {
    "doc": "Idle State",
    "title": "Idle State",
    "content": "Inherits: MovementState . ",
    "url": "/dungeoneers-docs/systems/entities/ai/idle-state",
    
    "relUrl": "/systems/entities/ai/idle-state"
  },"25": {
    "doc": "Idle State",
    "title": "Description",
    "content": "IdleState represents the idle behavior of an entity. In this state, the entity is not moving but may transition to other states based on input or conditions. Key features: . | Handles the entity’s idle animation | Checks for conditions to transition to other states (e.g., walking, running) | Applies gravity to the entity | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/idle-state#description",
    
    "relUrl": "/systems/entities/ai/idle-state#description"
  },"26": {
    "doc": "Inactive State",
    "title": "Inactive State",
    "content": "Inherits: State . ",
    "url": "/dungeoneers-docs/systems/entities/ai/inactive-state",
    
    "relUrl": "/systems/entities/ai/inactive-state"
  },"27": {
    "doc": "Inactive State",
    "title": "Description",
    "content": "InactiveState represents a state where the entity is not actively engaged in any action. It handles transitions to other states based on various conditions. Key features: . | Manages idle animations for combat and non-combat situations | Handles returning to spawn point for certain entity types | Checks for conditions to transition to other states (e.g., dead, incapacitated, chasing) | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/inactive-state#description",
    
    "relUrl": "/systems/entities/ai/inactive-state#description"
  },"28": {
    "doc": "Incapacitated State",
    "title": "Incompacitated State",
    "content": "Inherits: State . ",
    "url": "/dungeoneers-docs/systems/entities/ai/incapacitated-state#incompacitated-state",
    
    "relUrl": "/systems/entities/ai/incapacitated-state#incompacitated-state"
  },"29": {
    "doc": "Incapacitated State",
    "title": "Description",
    "content": "IncapacitatedState represents a state where the entity is temporarily unable to act. This could be due to stuns, knockdowns, or other crowd control effects. Key features: . | Manages the entity’s incapacitated animation | Stops the entity’s movement | Checks for conditions to transition out of the incapacitated state | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/incapacitated-state#description",
    
    "relUrl": "/systems/entities/ai/incapacitated-state#description"
  },"30": {
    "doc": "Incapacitated State",
    "title": "Incapacitated State",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/ai/incapacitated-state",
    
    "relUrl": "/systems/entities/ai/incapacitated-state"
  },"31": {
    "doc": "Home",
    "title": "Dungeoneers Documentation",
    "content": "Welcome to the official documentation for Dungeoneers. This documentation provides detailed explanations of the game’s core systems and classes. ",
    "url": "/dungeoneers-docs/#dungeoneers-documentation",
    
    "relUrl": "/#dungeoneers-documentation"
  },"32": {
    "doc": "Home",
    "title": "Core Systems",
    "content": ". | Entities - Base classes and entity management | Abilities &amp; Effects - Skills, spells, and status effects | World Building Tools - Map generation and world creation tools | . ",
    "url": "/dungeoneers-docs/#core-systems",
    
    "relUrl": "/#core-systems"
  },"33": {
    "doc": "Home",
    "title": "Purpose",
    "content": "This documentation serves as a comprehensive guide to understanding how different systems interact within the Dungeoneers framework. Whether you’re looking to understand the entity system, implement new abilities, or use the world building tools, you’ll find detailed explanations and examples here. ",
    "url": "/dungeoneers-docs/#purpose",
    
    "relUrl": "/#purpose"
  },"34": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/dungeoneers-docs/",
    
    "relUrl": "/"
  },"35": {
    "doc": "Aggro Table",
    "title": "Aggro Table",
    "content": "Inherits: Node . ",
    "url": "/dungeoneers-docs/systems/entities/aggro-table/",
    
    "relUrl": "/systems/entities/aggro-table/"
  },"36": {
    "doc": "Aggro Table",
    "title": "Description",
    "content": "AggroTable manages the aggression (aggro) system for entities like Minions or Bosses. It tracks and calculates aggression levels towards players, influencing target selection and combat behavior. Key features: . | Maintains an aggro table storing aggression values for each player | Provides methods for adding, decaying, and resetting aggro | Handles target selection based on highest aggro | Manages combat state transitions based on aggro levels | Responds to entity death or freeing events | . ",
    "url": "/dungeoneers-docs/systems/entities/aggro-table/#description",
    
    "relUrl": "/systems/entities/aggro-table/#description"
  },"37": {
    "doc": "Ability Container",
    "title": "Ability Container",
    "content": "Inherits: Node . ",
    "url": "/dungeoneers-docs/systems/entities/ability-container/",
    
    "relUrl": "/systems/entities/ability-container/"
  },"38": {
    "doc": "Ability Container",
    "title": "Child Classes",
    "content": ". | CompanionAbilityContainer | . ",
    "url": "/dungeoneers-docs/systems/entities/ability-container/#child-classes",
    
    "relUrl": "/systems/entities/ability-container/#child-classes"
  },"39": {
    "doc": "Ability Container",
    "title": "Description",
    "content": "AbilityContainer serves as the base class for managing abilities for entities in the game. It provides core functionality for ability usage, including attempt validation, cooldown management, and global cooldown (GCD) handling. Key features: . | Manages a collection of abilities for an entity | Creates ability node trees using AbilityData | Handles ability use attempts and validates conditions | Manages global cooldown (GCD) for abilities | Provides signals for ability use attempts (approved and rejected) | . ",
    "url": "/dungeoneers-docs/systems/entities/ability-container/#description",
    
    "relUrl": "/systems/entities/ability-container/#description"
  },"40": {
    "doc": "Abilities & Effects",
    "title": "Abilities &amp; Effects System",
    "content": " ",
    "url": "/dungeoneers-docs/systems/abilities-effects/#abilities--effects-system",
    
    "relUrl": "/systems/abilities-effects/#abilities--effects-system"
  },"41": {
    "doc": "Abilities & Effects",
    "title": "Overview",
    "content": "The Abilities &amp; Effects System handles all abilites and effects. Abilites are a node tree made up of a parent Ability along with with a Target Strategy, Use Strategy and a collection of Effect nodes. Ability nodes hold a resource AbilityData which will contain all exported data for the ability including it’s chosen Target Strategy, Use Strategy and an array of EffectData. The Ability when called to setup will instaniate it’s required children of set class by the AbilityData. ",
    "url": "/dungeoneers-docs/systems/abilities-effects/#overview",
    
    "relUrl": "/systems/abilities-effects/#overview"
  },"42": {
    "doc": "Abilities & Effects",
    "title": "Components",
    "content": "Ability Classes . Ability . The foundational class for all abilities. Target Strategy . The foundational class for all abilities target strategies. Contains all the logic required for the targeting of an active ability. Use Strategy . The foundational class for all abilities use strategies. Contains all the logic required for the use of an active ability. Effects Classes . Effect . The foundational class for all effects. Time Strategy . The foundational class for all effects time strategies. Contains all the logic required for the process of an effect. ",
    "url": "/dungeoneers-docs/systems/abilities-effects/#components",
    
    "relUrl": "/systems/abilities-effects/#components"
  },"43": {
    "doc": "Abilities & Effects",
    "title": "Abilities & Effects",
    "content": " ",
    "url": "/dungeoneers-docs/systems/abilities-effects/",
    
    "relUrl": "/systems/abilities-effects/"
  },"44": {
    "doc": "Use Strategy",
    "title": "Use Strategy",
    "content": " ",
    "url": "/dungeoneers-docs/systems/abilities-effects/use-strategy/",
    
    "relUrl": "/systems/abilities-effects/use-strategy/"
  },"45": {
    "doc": "AI",
    "title": "AI System",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/ai/#ai-system",
    
    "relUrl": "/systems/entities/ai/#ai-system"
  },"46": {
    "doc": "AI",
    "title": "Description",
    "content": "The ai system is controlled by a central StateMachine which will build states depending on the exported properties on setup. States all in inherit from a base State class, all states related to locomotion inherit from a MovementState class. ",
    "url": "/dungeoneers-docs/systems/entities/ai/#description",
    
    "relUrl": "/systems/entities/ai/#description"
  },"47": {
    "doc": "AI",
    "title": "AI Classes",
    "content": ". | StateMachine . | State | InactiveState | TargetSearchState | ChasingState | AttackingState | IncapacitatedState | FollowingState | PatrollingState | DeadState | PlayerCommandState . | MovementState | IdleState | RunningState | WalkingState | FallingState | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/#ai-classes",
    
    "relUrl": "/systems/entities/ai/#ai-classes"
  },"48": {
    "doc": "AI",
    "title": "AI",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/ai/",
    
    "relUrl": "/systems/entities/ai/"
  },"49": {
    "doc": "Ability",
    "title": "Ability",
    "content": " ",
    "url": "/dungeoneers-docs/systems/abilities-effects/ability/",
    
    "relUrl": "/systems/abilities-effects/ability/"
  },"50": {
    "doc": "Entity System",
    "title": "Entity System",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/",
    
    "relUrl": "/systems/entities/"
  },"51": {
    "doc": "Entity System",
    "title": "Overview",
    "content": "The Entity System is the core framework that manages all player and npc objects within Dungeoneers. It provides a robust foundation for creating and managing various types of entities including companions, minions, bosses, and NPCs. Each entity is composed of multiple components that handle different aspects of functionality, from visual representation to combat mechanics. ",
    "url": "/dungeoneers-docs/systems/entities/#overview",
    
    "relUrl": "/systems/entities/#overview"
  },"52": {
    "doc": "Entity System",
    "title": "Components",
    "content": "Core Components . Entity Base Class . The foundational class for all game objects, providing core functionality for: . | Movement and physics interactions | Combat mechanics including damage and healing | Effects and status condition management | Integration with AI and targeting systems | Support for various entity types (Companion, Minion, Boss, NPC) | . Rig Controller . Manages the visual representation and animations: . | Handles mesh instances and their materials | Controls outline effects for selection and targeting | Manages attachment points for weapons and VFX | Controls casting VFX and transparency effects | Integrates with the game’s selection and targeting systems | . Stats Container . Handles all entity attributes and statistics: . | Manages base, major, and minor stats | Controls health and resource management | Processes damage application and mitigation | Handles healing and regeneration | Provides methods for stat modification | . Combat &amp; Abilities . Ability Container . Manages all entity abilities and their usage: . | Controls ability collections for each entity | Handles ability use attempts and validation | Manages global cooldown (GCD) | Creates ability scenes using AbilityData | Provides signals for ability use attempts | . Effects Container . Handles status effects and buffs: . | Maintains active effects list | Manages effect application and removal | Provides effect querying and management | Tracks effect durations and stacks | . AI &amp; Behavior . AI System . Controls entity behavior and decision-making: . | Manages state machines for movement and actions | Handles combat positioning and targeting | Controls ability usage and decision-making | Manages different AI behaviors per entity type | . Aggro Table . Manages combat targeting and threat: . | Maintains aggression values for each target | Handles target selection and priority | Manages combat state transitions | Responds to combat events | . Pet Systems . Pet Container . Manages pet entities and their relationships: . | Maintains active pets list | Integrates with follower system | Handles pet addition and removal | . Pet Follow System . Controls pet movement and formations: . | Manages dynamic follower formations | Updates positions based on leader movement | Handles formation parameters | Ensures proper following behavior | . Equipment &amp; Interface . Equipment Data . Manages entity equipment and inventory: . | Handles equipment slots (helm, chest, legs, etc.) | Manages equipment stats and effects | Controls equipment visualization | . Nameplate . Manages entity UI elements: . | Displays health and resource bars | Shows buffs and debuffs | Manages cast bar for abilities | Updates based on entity state | . ",
    "url": "/dungeoneers-docs/systems/entities/#components",
    
    "relUrl": "/systems/entities/#components"
  },"53": {
    "doc": "Entity System",
    "title": "Implementation Details",
    "content": "Each component is designed to be modular and self-contained while maintaining efficient communication through a robust signal system. Components can be enabled or disabled based on entity type requirements, allowing for flexible entity configurations. Entity Types . | Companions: Player-controlled allies with full ability sets and equipment | Minions: Basic enemy units with simplified AI and combat behavior | Bosses: Complex enemies with unique abilities and combat patterns | NPCs: Non-combat entities for world interaction | . Hierarchy . The Entity System follows a clear hierarchical structure where the base Entity class provides core functionality, and specific entity types extend this with additional features through component composition. ",
    "url": "/dungeoneers-docs/systems/entities/#implementation-details",
    
    "relUrl": "/systems/entities/#implementation-details"
  },"54": {
    "doc": "Entity System",
    "title": "Examples",
    "content": "[Detailed code examples and implementation guides will be added in subsequent documentation] . ",
    "url": "/dungeoneers-docs/systems/entities/#examples",
    
    "relUrl": "/systems/entities/#examples"
  },"55": {
    "doc": "Time Strategy",
    "title": "Time Strategy",
    "content": " ",
    "url": "/dungeoneers-docs/systems/abilities-effects/time-strategy/",
    
    "relUrl": "/systems/abilities-effects/time-strategy/"
  },"56": {
    "doc": "Stats",
    "title": "Entity Stats Container",
    "content": "Inherits: Node . ",
    "url": "/dungeoneers-docs/systems/entities/stats/#entity-stats-container",
    
    "relUrl": "/systems/entities/stats/#entity-stats-container"
  },"57": {
    "doc": "Stats",
    "title": "Description",
    "content": "EntityStatsContainer manages all stats and attributes for an entity. It handles stat calculations, modifications, and interactions such as taking damage or healing. Key features: . | Manages base, major, and minor stats for entities | Handles health and resource management | Processes damage application, including avoidance and mitigation | Manages healing and resource regeneration | Provides methods for modifying and querying stats | . ",
    "url": "/dungeoneers-docs/systems/entities/stats/#description",
    
    "relUrl": "/systems/entities/stats/#description"
  },"58": {
    "doc": "Stats",
    "title": "Stats",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/stats/",
    
    "relUrl": "/systems/entities/stats/"
  },"59": {
    "doc": "Rig",
    "title": "Rig",
    "content": "Inherits: Node3D . ",
    "url": "/dungeoneers-docs/systems/entities/rig/",
    
    "relUrl": "/systems/entities/rig/"
  },"60": {
    "doc": "Rig",
    "title": "Child Classes",
    "content": ". | EntityRig | ModularCompanionRig | . ",
    "url": "/dungeoneers-docs/systems/entities/rig/#child-classes",
    
    "relUrl": "/systems/entities/rig/#child-classes"
  },"61": {
    "doc": "Rig",
    "title": "Description",
    "content": "RigController manages the visual representation, animations, and attachments for entities in the game. It handles mesh instances, outline effects, remote transforms for VFX, and various visual states of the entity. Key features: . | Manages mesh instances and their materials | Handles outline effects for selection and targeting | Manages attachment points for weapons and VFX | Controls casting VFX and transparency effects | Integrates with the game’s selection and targeting systems | Holds the AnimationPlayer for the entity | . ",
    "url": "/dungeoneers-docs/systems/entities/rig/#description",
    
    "relUrl": "/systems/entities/rig/#description"
  },"62": {
    "doc": "Pet Follow System",
    "title": "Dynamic Follower System (Pet Follow System)",
    "content": "Inherits: Node . ",
    "url": "/dungeoneers-docs/systems/entities/pet-follow-manager/#dynamic-follower-system-pet-follow-system",
    
    "relUrl": "/systems/entities/pet-follow-manager/#dynamic-follower-system-pet-follow-system"
  },"63": {
    "doc": "Pet Follow System",
    "title": "Description",
    "content": "DynamicFollowerSystem manages a group of followers in a dynamic formation around a leader. It calculates and updates follower positions based on the leader’s movement and predefined formation parameters. Key features: . | Maintains a dynamic formation of followers around a leader | Allows for customizable formation parameters (distance, angle spread, etc.) | Uses noise to add slight randomness to follower positions for natural movement | Ensures followers stay within defined distance limits from the leader | Provides methods to add/remove followers and update the formation | Emits signals when the formation is updated for external systems to react | . ",
    "url": "/dungeoneers-docs/systems/entities/pet-follow-manager/#description",
    
    "relUrl": "/systems/entities/pet-follow-manager/#description"
  },"64": {
    "doc": "Pet Follow System",
    "title": "Pet Follow System",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/pet-follow-manager/",
    
    "relUrl": "/systems/entities/pet-follow-manager/"
  },"65": {
    "doc": "Pet Container",
    "title": "Pet Container",
    "content": "Inherits: Node . ",
    "url": "/dungeoneers-docs/systems/entities/pet-container/",
    
    "relUrl": "/systems/entities/pet-container/"
  },"66": {
    "doc": "Pet Container",
    "title": "Description",
    "content": "PetsContainer manages the pets owned by an entity. It keeps track of active pets and integrates with a follow system to manage pet movement and behavior. Key features: . | Maintains a list of active pets for an entity | Integrates with a dynamic follower system for pet movement | Handles adding and removing pets from the entity | . ",
    "url": "/dungeoneers-docs/systems/entities/pet-container/#description",
    
    "relUrl": "/systems/entities/pet-container/#description"
  },"67": {
    "doc": "Nameplate",
    "title": "Nameplate",
    "content": "Inherits: MarginContainer . ",
    "url": "/dungeoneers-docs/systems/entities/nameplate/",
    
    "relUrl": "/systems/entities/nameplate/"
  },"68": {
    "doc": "Nameplate",
    "title": "Description",
    "content": "This class manages the display of entity nameplates in the game, showing health, resource, cast bars, and status effects (buffs/debuffs). Key features: . | Displays entity name, health, and resource bars | Shows active buffs and debuffs | Manages cast bar for abilities | Updates dynamically based on entity state | Supports different styles for normal entities and bosses | Configurable through game settings | . ",
    "url": "/dungeoneers-docs/systems/entities/nameplate/#description",
    
    "relUrl": "/systems/entities/nameplate/#description"
  },"69": {
    "doc": "Effects Container",
    "title": "Effects Container",
    "content": "Inherits: Node . ",
    "url": "/dungeoneers-docs/systems/entities/effects-container/",
    
    "relUrl": "/systems/entities/effects-container/"
  },"70": {
    "doc": "Effects Container",
    "title": "Description",
    "content": "EffectsContainer manages all active effects on an entity. It handles the addition, removal, and tracking of various effects that can be applied to entities in the game. Key features: . | Maintains a list of all active effects on the entity | Handles the application and removal of effects | Provides methods for querying and managing effects | . ",
    "url": "/dungeoneers-docs/systems/entities/effects-container/#description",
    
    "relUrl": "/systems/entities/effects-container/#description"
  },"71": {
    "doc": "Target Strategy",
    "title": "Target Strategy",
    "content": " ",
    "url": "/dungeoneers-docs/systems/abilities-effects/target-strategy/",
    
    "relUrl": "/systems/abilities-effects/target-strategy/"
  },"72": {
    "doc": "Effect",
    "title": "Effect",
    "content": " ",
    "url": "/dungeoneers-docs/systems/abilities-effects/effect/",
    
    "relUrl": "/systems/abilities-effects/effect/"
  },"73": {
    "doc": "Entity",
    "title": "Entity",
    "content": "Inherits: CharacterBody3D . ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/",
    
    "relUrl": "/systems/entities/entity-class/"
  },"74": {
    "doc": "Entity",
    "title": "Child Classes",
    "content": ". | Companion | Minion | Boss | Pet | . ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#child-classes",
    
    "relUrl": "/systems/entities/entity-class/#child-classes"
  },"75": {
    "doc": "Entity",
    "title": "Description",
    "content": "Entity is the base class for all characters and creatures in the game world. It provides core functionality for movement, combat, stats management, and interaction with the game’s systems. This class serves as the foundation for both player-controlled characters and AI-driven entities. Key features: . | Manages entity stats, health, and resources | Handles movement and physics interactions | Provides a framework for combat mechanics including damage and healing | Manages effects, abilities, and status conditions | Integrates with the game’s AI and targeting systems | Supports various entity types (Companion, Minion, Boss, NPC) | . ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#description",
    
    "relUrl": "/systems/entities/entity-class/#description"
  },"76": {
    "doc": "Entity",
    "title": "Enumerations",
    "content": "enum Team: . | NONE = 0 — Default team, no specific allegiance | ALLY = 1 — Friendly to the player | ENEMY = 2 — Hostile to the player | NEUTRAL = 3 — Neither friendly nor hostile | . ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#enumerations",
    
    "relUrl": "/systems/entities/entity-class/#enumerations"
  },"77": {
    "doc": "Entity",
    "title": "Properties",
    "content": "Exported Properties . | Type | Property | Default | Description | . | int | entityID | 0 | Unique identifier for the entity type | . | int | entity_unique_ID | 0 | Unique instance ID for individual entities in the world | . | String | entity_name | “NAME” | Display name of the entity | . | int | entity_type | 0 | Type of entity (0: Companion, 1: Pet, 2: Minion, 3: Boss, 4: NPC) | . | int | level | 1 | Current level of the entity | . | Color | resource_colour | Color(“3f92ff”) | Color used for the resource bar display | . | float | pull_range | 0.0 | Range at which the entity will engage in combat | . | float | attack_range | 0.0 | Range at which entity will attack | . | bool | always_immobile | false | If true, entity cannot move | . | bool | does_not_face_direction | false | If true, entity will not rotate to face targets | . Immunity Properties . | Type | Property | Default | Description | . | bool | physical_damage_immunity | false | Immune to physical damage | . | bool | magical_damage_immunity | false | Immune to magical damage | . | bool | flee_immunity | false | Cannot be forced to flee | . | bool | disorient_immunity | false | Cannot be disoriented | . | bool | rooted_immunity | false | Cannot be rooted | . | bool | forceful_displacement_immunity | false | Cannot be knocked back or pulled | . | bool | silance_immunity | false | Cannot be silenced | . | bool | blind_immunity | false | Cannot be blinded | . | bool | cripple_immunity | false | Cannot be crippled | . | bool | incapacitated_immunity | false | Cannot be incapacitated | . Node Path Properties . | Type | Property | Description | . | RigController | rig | Reference to entity’s visual and animation controller | . | CollisionShape3D | entity_collision_shape | Physics collision shape | . | EntityStatsContainer | entity_stats | Stats and attributes manager | . | StateMachine | ai | AI state machine controller | . | AggroTable | aggro_table | Tracks threat levels from other entities | . | AbilityContainer | ability_container | Manages entity abilities | . | PetsContainer | pet_container | Manages pet entities | . | DynamicFollowerSystem | pet_follower_system | Controls pet movement and formation | . | EffectsContainer | effects_container | Holds &amp; Manages current active parasite effects | . | Camera3D | full_body_cam | Full body camera view | . | Camera3D | face_cam | Face close-up camera | . | Nameplate | nameplate | UI elements display | . | DamageNumbers | damage_number_origin | Floating combat text origin point | . | MarginContainer | debug_checker | Debug UI container | . | Timer | debug_timer | Debug update timer | . | EquipmentInventoryData | equipment_data | Equipment inventory manager | . | InventoryData | inventory_data | General inventory manager | . General Properties . | Type | Property | Default | Description | . | Entity | target | null | Current target of the entity | . | Vector3 | target_position | Vector3.ZERO | Position of current target | . | bool | target_locked | false | If true, target cannot be changed | . | Team | team | Team.NONE | Current team allegiance | . | Ability | casting_ability | null | Currently casting ability | . | AnimationPlayer | animation_player | null | Entity’s animation controller | . State Flags . | Type | Property | Default | Description | . | bool | dead | false | If true, entity is defeated | . | bool | currently_moving | false | If true, entity is in motion | . | bool | in_combat | false | If true, entity is in combat | . | bool | casting | false | If true, entity is casting an ability | . | bool | immobile | false | If true, entity cannot move | . | Effect | active_movement_effect | null | Current movement-affecting effect | . | bool | falling | false | If true, entity is in mid-air | . | bool | walking | false | If true, entity is walking (vs running) | . | bool | flying | false | If true, entity is in flight mode | . Status Effect Flags . | Type | Property | Default | Description | . | bool | incapacitated | false | If true, entity is stunned | . | bool | flee | false | If true, entity is forced to flee | . | bool | disorient | false | If true, entity is disoriented | . | bool | rooted | false | If true, entity cannot move | . | bool | silance | false | If true, entity cannot cast spells | . | bool | blind | false | If true, entity cannot use physical abilities | . | bool | cripple | false | If true, entity has reduced movement | . Status Effect Immunity Flags . | Type | Property | Default | Description | . | bool | incapacitated_immune | false | Current immunity to incapacitation | . | bool | flee_immune | false | Current immunity to flee effects | . | bool | disorient_immune | false | Current immunity to disorientation | . | bool | root_immune | false | Current immunity to root effects | . | bool | silance_immune | false | Current immunity to silence effects | . | bool | blind_immune | false | Current immunity to blind effects | . | bool | cripple_immune | false | Current immunity to cripple effects | . ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#properties",
    
    "relUrl": "/systems/entities/entity-class/#properties"
  },"78": {
    "doc": "Entity",
    "title": "Methods",
    "content": "| Return Type | Method | Description | . | void | _ready | Called when the node enters scene tree | . | void | _initialize_entity | Initializes all components and systems | . | void | _connect_entity_signals | Connects necessary signals | . | void | _set_entity_team | Sets team based on entity type | . | void | _setup_rig | Sets up entity’s rig and mesh instances | . | void | _setup_animations | Sets up animation system | . | void | _setup_stats | Initializes stats container | . | void | _setup_ai | Sets up AI system | . | void | _setup_pet_container | Initializes pet system | . | void | setup_nameplate | Sets up entity’s nameplate | . | void | _setup_effects | Initializes effects container | . | void | _setup_immunities | Sets up immunity flags | . | void | _setup_ability_container | Initializes ability container | . | void | face_direction | Forces entity to face direction | . | void | set_target | Sets current target | . | void | animation_finished | Handles animation completion | . | void | change_combat_state | Changes combat state | . | void | die | Handles entity death | . | void | _on_entity_taken_damage | Processes damage taken | . | void | cast_interrupted | Interrupts current cast | . | void | stop_cast | Forces cast stop | . | void | entity_fleed | Applies flee effect | . | void | flee_immune_timer_end | Ends flee immunity | . | void | entity_disorientated | Applies disorient effect | . | void | disorient_immune_timer_end | Ends disorient immunity | . | void | entity_rooted | Applies root effect | . | void | rooted_immune_timer_end | Ends root immunity | . | void | entity_silanced | Applies silence effect | . | void | silance_immune_timer_end | Ends silence immunity | . | void | entity_blinded | Applies blind effect | . | void | blind_immune_timer_end | Ends blind immunity | . | void | entity_crippled | Applies cripple effect | . | void | cripple_immune_timer_end | Ends cripple immunity | . | void | set_current_target_on | Highlights current target | . | void | set_current_target_off | Removes target highlight | . | void | debug_display | Toggles debug display | . | void | connect_to_effect | Connects effect callbacks | . | void | _on_tree_exiting | Handles cleanup on removal | . ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#methods",
    
    "relUrl": "/systems/entities/entity-class/#methods"
  },"79": {
    "doc": "Entity",
    "title": "Property Descriptions",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#property-descriptions",
    
    "relUrl": "/systems/entities/entity-class/#property-descriptions"
  },"80": {
    "doc": "Entity",
    "title": "Exported Properties",
    "content": "entityID . int entityID = 0 . | int get_entity_id() | void set_entity_id(value: int) | . Unique identifier for the entity type. This ID is used to identify different types of entities in the game (e.g., different types of companions or enemies). Essential for saving and loading entity data. Note: All new entities must have a unique ID set using the relevant database updater tool script. entity_unique_ID . int entity_unique_ID = 0 . | int get_entity_unique_id() | void set_entity_unique_id(value: int) | . Instance-specific unique identifier. This ID distinguishes individual instances of entities in the world. Required for save functionality to work correctly. Each entity instance in the world must have a unique ID. entity_name . String entity_name = \"NAME\" . | String get_entity_name() | void set_entity_name(value: String) | . Display name of the entity shown in the UI. Used in nameplates, combat logs, and other UI elements where the entity needs to be identified. entity_type . int entity_type = 0 . | int get_entity_type() | void set_entity_type(value: int) | . Defines the basic type of the entity. Affects AI behavior, combat interactions, and UI display. | 0: Companion - Player-controlled ally with full ability sets | 1: Pet - AI-controlled companion creature | 2: Minion - Basic enemy unit | 3: Boss - Complex enemy with unique abilities | 4: NPC - Non-combat interactive entity | . Note: The entity_type directly influences the team assignment during initialization. level . int level = 1 . | int get_level() | void set_level(value: int) | . Current level of the entity. Affects base stats, combat calculations, and interaction possibilities. Valid range is 1-10. resource_colour . Color resource_colour = Color(\"3f92ff\") . | Color get_resource_colour() | void set_resource_colour(value: Color) | . Color used for the entity’s resource bar in the UI. Customizes the appearance of the resource meter in nameplates and other UI elements. Default is a bright blue color. pull_range . float pull_range = 0.0 . | float get_pull_range() | void set_pull_range(value: float) | . Distance at which the entity will engage in combat with enemies. When another entity enters this range: . | The entity will enter combat state | Initial aggro is generated | AI will begin combat routines | . Note: Only active if the entity has AI combat capabilities. attack_range . float attack_range = 0.0 . | float get_attack_range() | void set_attack_range(value: float) | . Maximum distance at which the entity can perform basic attacks. Used for: . | AI positioning calculations | Auto-attack range checks | Combat movement decisions | . Note: This range is separate from ability-specific ranges, which are defined in the ability data. always_immobile . bool always_immobile = false . | bool is_always_immobile() | void set_always_immobile(value: bool) | . If true, the entity cannot move from its position. Useful for: . | Stationary NPCs | Fixed position enemies | Environmental entities | . Note: This is different from temporary immobilization effects (like root or stun). does_not_face_direction . bool does_not_face_direction = false . | bool get_does_not_face_direction() | void set_does_not_face_direction(value: bool) | . If true, the entity will not rotate to face targets or movement direction. Used for: . | Entities that should maintain a fixed orientation | Special NPCs or environmental entities | Entities with non-standard movement behavior | . See also: face_direction() method for manual rotation control. ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#exported-properties-1",
    
    "relUrl": "/systems/entities/entity-class/#exported-properties-1"
  },"81": {
    "doc": "Entity",
    "title": "Immunity Properties",
    "content": "physical_damage_immunity . bool physical_damage_immunity = false . | bool is_physical_damage_immune() | void set_physical_damage_immune(value: bool) | . If true, the entity takes no damage from physical attacks. Affects: . | Basic attacks | Physical abilities | Environmental physical damage | . Note: Does not affect magical damage sources. magical_damage_immunity . bool magical_damage_immunity = false . | bool is_magical_damage_immune() | void set_magical_damage_immune(value: bool) | . If true, the entity takes no damage from magical attacks. Affects: . | Spell damage | Magical abilities | Environmental magical damage | . Note: Does not affect physical damage sources. flee_immunity . bool flee_immunity = false . | bool is_flee_immune() | void set_flee_immune(value: bool) | . If true, the entity cannot be affected by fear or flee effects. When immune: . | Fear effects are ignored | Entity maintains normal AI behavior | Existing flee effects are removed | Sets 15-second immunity timer when gained through effects | . Note: Duration can be checked through flee_immune_timer. disorient_immunity . bool disorient_immunity = false . | bool is_disorient_immune() | void set_disorient_immune(value: bool) | . If true, the entity cannot be disoriented. When immune: . | Disorienting effects are ignored | Entity maintains normal control | Existing disorient effects are removed | Sets 15-second immunity timer when gained through effects | . Note: Duration can be checked through disorient_immune_timer. rooted_immunity . bool rooted_immunity = false . | bool is_root_immune() | void set_root_immune(value: bool) | . If true, the entity cannot be rooted in place. When immune: . | Root effects are ignored | Entity maintains full mobility | Existing root effects are removed | Sets 15-second immunity timer when gained through effects | . Note: Duration can be checked through rooted_immune_timer. forceful_displacement_immunity . bool forceful_displacement_immunity = false . | bool is_forceful_displacement_immune() | void set_forceful_displacement_immune(value: bool) | . If true, the entity cannot be forcefully moved. Prevents: . | Knockback effects | Pull effects | Push effects | Other forced movement abilities | . Note: Does not affect voluntary movement or teleports. silance_immunity . bool silance_immunity = false . | bool is_silance_immune() | void set_silance_immune(value: bool) | . If true, the entity cannot be silenced. When immune: . | Silence effects are ignored | Spell casting remains available | Existing silence effects are removed | Sets 15-second immunity timer when gained through effects | . Note: Duration can be checked through silance_immune_timer. blind_immunity . bool blind_immunity = false . | bool is_blind_immune() | void set_blind_immune(value: bool) | . If true, the entity cannot be blinded. When immune: . | Blind effects are ignored | Physical abilities remain available | Existing blind effects are removed | Sets 15-second immunity timer when gained through effects | . Note: Duration can be checked through blind_immune_timer. cripple_immunity . bool cripple_immunity = false . | bool is_cripple_immune() | void set_cripple_immune(value: bool) | . If true, the entity cannot be crippled. When immune: . | Movement speed reduction effects are ignored | Normal movement speed is maintained | Existing cripple effects are removed | Sets 15-second immunity timer when gained through effects | . Note: Duration can be checked through cripple_immune_timer. incapacitated_immunity . bool incapacitated_immunity = false . | bool is_incapacitated_immune() | void set_incapacitated_immune(value: bool) | . If true, the entity cannot be incapacitated. When immune: . | Stun effects are ignored | Entity maintains normal control | Existing incapacitate effects are removed | Sets 15-second immunity timer when gained through effects | . Note: Duration can be checked through incapacitated_immune_timer. ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#immunity-properties-1",
    
    "relUrl": "/systems/entities/entity-class/#immunity-properties-1"
  },"82": {
    "doc": "Entity",
    "title": "Node Path Properties",
    "content": "rig . RigController rig . | RigController get_rig() | void set_rig(value: RigController) | . Reference to the entity’s visual representation controller. Manages: . | Mesh instances and materials | Animation playback | Visual effects and highlights | Equipment attachments | Outline effects for selection and targeting | . Note: Must be set for entity to be visible and animated. entity_collision_shape . CollisionShape3D entity_collision_shape . | CollisionShape3D get_entity_collision_shape() | void set_entity_collision_shape(value: CollisionShape3D) | . Physics collision shape for the entity. Defines: . | Physical boundaries for collision detection | Area for ability targeting | Space occupied in the world | Interaction boundaries | . Note: Required for proper physics and collision handling. entity_stats . EntityStatsContainer entity_stats . | EntityStatsContainer get_entity_stats() | void set_entity_stats(value: EntityStatsContainer) | . Container managing all entity statistics and attributes. Handles: . | Base, major, and minor stats | Health and resource management | Combat calculations | Damage and healing processing | Stat modifications | . Note: Core component required for entity functionality. ai . StateMachine ai . | StateMachine get_ai() | void set_ai(value: StateMachine) | . AI state machine controlling entity behavior. Manages: . | Movement and action states | Combat behavior | Decision making | Target selection | State transitions | . Note: Optional for player-controlled entities. aggro_table . AggroTable aggro_table . | AggroTable get_aggro_table() | void set_aggro_table(value: AggroTable) | . System for tracking threat levels from other entities. Manages: . | Threat calculation | Target priority | Combat engagement | Aggro decay | Target switching | . Note: Only used by AI-controlled combat entities. ability_container . AbilityContainer ability_container . | AbilityContainer get_ability_container() | void set_ability_container(value: AbilityContainer) | . Container managing entity abilities and their usage. Handles: . | Ability creation and initialization | Cooldown management | Resource costs | Usage validation | Global cooldown | . Note: Required for entities that can use abilities. pet_container . PetsContainer pet_container . | PetsContainer get_pet_container() | void set_pet_container(value: PetsContainer) | . Container managing pet entities. Handles: . | Pet tracking | Pet addition/removal | Pet state management | Integration with follower system | . Note: Only required for entities that can have pets. pet_follower_system . DynamicFollowerSystem pet_follower_system . | DynamicFollowerSystem get_pet_follower_system() | void set_pet_follower_system(value: DynamicFollowerSystem) | . System controlling pet movement and formation. Manages: . | Formation positioning | Following behavior | Movement updates | Position adjustments | . Note: Required if entity uses the pet system. effects_container . EffectsContainer effects_container . | EffectsContainer get_effects_container() | void set_effects_container(value: EffectsContainer) | . Container managing active effects on the entity. Handles: . | Effect application | Effect removal | Effect tracking | Effect updates | Effect stacking | . Note: Required for entities that can have status effects. full_body_cam . Camera3D full_body_cam . | Camera3D get_full_body_cam() | void set_full_body_cam(value: Camera3D) | . Camera for full body view of the entity. Used for: . | Character preview | Equipment view | Animation preview | Customization view | . Note: Optional, used primarily for player characters. face_cam . Camera3D face_cam . | Camera3D get_face_cam() | void set_face_cam(value: Camera3D) | . Camera for close-up view of entity’s face. Used for: . | Portrait views | Dialog scenes | Facial customization | Expression display | . Note: Optional, used primarily for player characters. nameplate . Nameplate nameplate . | Nameplate get_nameplate() | void set_nameplate(value: Nameplate) | . UI element displaying entity information. Shows: . | Entity name | Health/resource bars | Status effects | Cast bars | Combat text | . Note: Required for visible entities in game world. damage_number_origin . DamageNumbers damage_number_origin . | DamageNumbers get_damage_number_origin() | void set_damage_number_origin(value: DamageNumbers) | . Point of origin for floating combat text. Used for: . | Damage numbers | Healing numbers | Status effect text | Combat feedback | . Note: Required for combat feedback visualization. debug_checker . MarginContainer debug_checker . | MarginContainer get_debug_checker() | void set_debug_checker(value: MarginContainer) | . Container for debug information display. Shows: . | Entity state | Current properties | Debug statistics | Development info | . Note: Only visible when debug mode is enabled. debug_timer . Timer debug_timer . | Timer get_debug_timer() | void set_debug_timer(value: Timer) | . Timer for debug update frequency. Controls: . | Debug info refresh rate | Development testing | Performance monitoring | . Note: Only active when debug mode is enabled. equipment_data . EquipmentInventoryData equipment_data . | EquipmentInventoryData get_equipment_data() | void set_equipment_data(value: EquipmentInventoryData) | . Manager for entity equipment slots. Handles: . | Equipment slots | Equipment stats | Equipment visualization | Equipment changes | . Note: Required for entities that can equip items. inventory_data . InventoryData inventory_data . | InventoryData get_inventory_data() | void set_inventory_data(value: InventoryData) | . Manager for entity inventory. Handles: . | Item storage | Item management | Inventory slots | Item interactions | . Note: Required for entities that can carry items. ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#node-path-properties-1",
    
    "relUrl": "/systems/entities/entity-class/#node-path-properties-1"
  },"83": {
    "doc": "Entity",
    "title": "General Properties",
    "content": "target . Entity target . | Entity get_target() | void set_target(value: Entity) | . Currently selected target for the entity. Used for: . | Ability targeting | AI decision making | Combat interactions | Movement calculations | UI target display | . Note: Can be locked using target_locked flag. target_position . Vector3 target_position . | Vector3 get_target_position() | void set_target_position(value: Vector3) | . Current world position of the entity’s target. Used for: . | Movement pathfinding | Range calculations | Position updating | AI navigation | . Note: Updated automatically when target moves. Pretty sure this is defunct - if not it should be, very taxing don’t see why we need it . target_locked . target_locked . bool target_locked . | bool is_target_locked() | void set_target_locked(value: bool) | . If true, the entity’s target cannot be changed. Controls: . | Target switching prevention | Forced target maintenance | AI target selection | Manual target changes | . Note: Used for abilities requiring specific target focus. team . Team team . | Team get_team() | void set_team(value: Team) | . Entity’s current team allegiance. Determines: . | Combat interactions | AI behavior | Targeting restrictions | UI elements appearance | Effect applications | . See also: Team enumeration for possible values. casting_ability . Ability casting_ability . | Ability get_casting_ability() | void set_casting_ability(value: Ability) | . Currently casting ability, if any. Tracks: . | Active cast | Cast interruption | Cast progress | Cast requirements | . Note: Null when not casting an ability. animation_player . AnimationPlayer animation_player . | AnimationPlayer get_animation_player() | void set_animation_player(value: AnimationPlayer) | . Controller for entity animations. Manages: . | Movement animations | Combat animations | Ability animations | State transitions | Animation blending | . Note: Required for visual entity movement and actions. ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#general-properties-1",
    
    "relUrl": "/systems/entities/entity-class/#general-properties-1"
  },"84": {
    "doc": "Entity",
    "title": "State Flags",
    "content": "dead . bool dead = false . | bool is_dead() | void set_dead(value: bool) | . If true, the entity is defeated. When dead: . | All movement stops | Actions are prevented | Combat state ends | Collision is disabled | Death animation plays | All effects are removed | . Note: Can only be revived through specific abilities or events. currently_moving . bool currently_moving = false . | bool is_currently_moving() | void set_currently_moving(value: bool) | . If true, the entity is in motion. Affects: . | Movement animations | State transitions | AI decisions | Ability usage | Formation updates | . Note: Updated automatically during movement processing. in_combat . bool in_combat = false . | bool is_in_combat() | void set_in_combat(value: bool) | . If true, the entity is engaged in combat. Affects: . | AI behavior | Health regeneration | Combat animations | UI elements | State decisions | . Note: Influences various systems including regeneration and AI. casting . bool casting = false . | bool is_casting() | void set_casting(value: bool) | . If true, the entity is casting an ability. During casting: . | Movement may be restricted | Other abilities are locked | Cast bar is shown | Can be interrupted | Animation plays | . Note: Works in conjunction with casting_ability property. immobile . bool immobile = false . | bool is_immobile() | void set_immobile(value: bool) | . If true, the entity cannot move. Different from always_immobile: . | Temporary state | Can be caused by effects | Can be removed | Allows rotation | Combat viable | . Note: Used for temporary movement restrictions. active_movement_effect . Effect active_movement_effect = null . | Effect get_active_movement_effect() | void set_active_movement_effect(value: Effect) | . Current effect modifying movement, if any. Tracks: . | Movement speed changes | Movement restrictions | Special movement types | Movement animations | Effect duration | . Note: Only one movement effect can be active at a time. falling . bool falling = false . | bool is_falling() | void set_falling(value: bool) | . If true, the entity is in mid-air. During falling: . | Gravity is applied | Fall animation plays | Movement is limited | States are restricted | Landing is checked | . Note: Automatically handled by movement system. walking . bool walking = false . | bool is_walking() | void set_walking(value: bool) | . If true, entity is moving at walk speed. Affects: . | Movement speed | Animation state | Sound effects | Combat status | Energy usage | . Note: Alternative to running state. flying . bool flying = false . | bool is_flying() | void set_flying(value: bool) | . If true, entity is in flight mode. During flight: . | Gravity is ignored | Different movement rules | Special animations | Unique interactions | Height tracking | . Note: Only available to specific entity types. ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#state-flags-1",
    
    "relUrl": "/systems/entities/entity-class/#state-flags-1"
  },"85": {
    "doc": "Entity",
    "title": "Status Effect Flags",
    "content": "incapacitated . bool incapacitated = false . | bool is_incapacitated() | void set_incapacitated(value: bool) | . If true, entity is stunned. During incapacitation: . | All actions prevented | Movement blocked | Abilities blocked | AI suspended | Stun animation plays | . Note: Can be prevented by incapacitated_immunity. flee . bool flee = false . | bool is_fleeing() | void set_flee(value: bool) | . If true, entity is forced to flee. During flee: . | Forced movement away from source | Cannot use abilities | AI overridden | Run animation plays | Combat state maintained | . Note: Can be prevented by flee_immunity. disorient . bool disorient = false . | bool is_disoriented() | void set_disoriented(value: bool) | . If true, entity is disoriented. While disoriented: . | Movement is erratic | Ability usage fails | AI disrupted | Special animation plays | Combat effectiveness reduced | . Note: Can be prevented by disorient_immunity. rooted . bool rooted = false . | bool is_rooted() | void set_rooted(value: bool) | . If true, entity cannot move. While rooted: . | Movement prevented | Position locked | Can still rotate | Can use abilities | Special animation plays | . Note: Can be prevented by rooted_immunity. silance . bool silance = false . | bool is_silenced() | void set_silenced(value: bool) | . If true, entity cannot cast spells. While silenced: . | Magical abilities blocked | Current casts interrupted | Physical abilities allowed | Special effects shown | UI indicator displayed | . Note: Can be prevented by silance_immunity. blind . bool blind = false . | bool is_blind() | void set_blind(value: bool) | . If true, entity cannot use physical abilities. While blinded: . | Physical abilities blocked | Basic attacks fail | Magical abilities allowed | Special effects shown | UI indicator displayed | . Note: Can be prevented by blind_immunity. cripple . bool cripple = false . | bool is_crippled() | void set_crippled(value: bool) | . If true, entity has reduced movement. While crippled: . | Movement speed reduced | Special animation plays | Movement effects shown | Combat effectiveness reduced | UI indicator displayed | . Note: Can be prevented by cripple_immunity. ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#status-effect-flags-1",
    
    "relUrl": "/systems/entities/entity-class/#status-effect-flags-1"
  },"86": {
    "doc": "Entity",
    "title": "Status Effect Immunity Flags",
    "content": "incapacitated_immune . bool incapacitated_immune = false . | bool is_incapacitated_immune() | void set_incapacitated_immune(value: bool) | . Current immunity to incapacitation effects. When immune: . | Stun effects blocked | Current stuns removed | 15-second timer started | Immunity UI shown | Prevents new applications | . Note: Timer managed by incapacitated_immune_timer. flee_immune . bool flee_immune = false . | bool is_flee_immune() | void set_flee_immune(value: bool) | . Current immunity to flee effects. When immune: . | Fear effects blocked | Current fears removed | 15-second timer started | Immunity UI shown | Prevents new applications | . Note: Timer managed by flee_immune_timer. disorient_immune . bool disorient_immune = false . | bool is_disorient_immune() | void set_disorient_immune(value: bool) | . Current immunity to disorientation effects. When immune: . | Disorient effects blocked | Current disorients removed | 15-second timer started | Immunity UI shown | Prevents new applications | . Note: Timer managed by disorient_immune_timer. root_immune . bool root_immune = false . | bool is_root_immune() | void set_root_immune(value: bool) | . Current immunity to root effects. When immune: . | Root effects blocked | Current roots removed | 15-second timer started | Immunity UI shown | Prevents new applications | . Note: Timer managed by root_immune_timer. silance_immune . bool silance_immune = false . | bool is_silance_immune() | void set_silance_immune(value: bool) | . Current immunity to silence effects. When immune: . | Silence effects blocked | Current silences removed | 15-second timer started | Immunity UI shown | Prevents new applications | . Note: Timer managed by silance_immune_timer. blind_immune . bool blind_immune = false . | bool is_blind_immune() | void set_blind_immune(value: bool) | . Current immunity to blind effects. When immune: . | Blind effects blocked | Current blinds removed | 15-second timer started | Immunity UI shown | Prevents new applications | . Note: Timer managed by blind_immune_timer. cripple_immune . bool cripple_immune = false . | bool is_cripple_immune() | void set_cripple_immune(value: bool) | . Current immunity to cripple effects. When immune: . | Cripple effects blocked | Current cripples removed | 15-second timer started | Immunity UI shown | Prevents new applications | . Note: Timer managed by cripple_immune_timer. ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#status-effect-immunity-flags-1",
    
    "relUrl": "/systems/entities/entity-class/#status-effect-immunity-flags-1"
  },"87": {
    "doc": "Entity",
    "title": "Method Descriptions",
    "content": "_ready . void _ready() . Called when node enters scene tree. Calls _initialize_entity() to set up all entity systems. _initialize_entity . void _initialize_entity() . Initializes all components and systems: . | Connects signals | Sets team | Sets up rig, animations, stats | Initializes immunities, effects, pets | Sets up abilities and AI | Initializes nameplate | . _connect_entity_signals . void _connect_entity_signals() . Connects necessary signals: . | Target changes with PlayerManager | Animation finished | Debug signals | Damage taken signals | . _set_entity_team . void _set_entity_team() . Sets team based on entity_type: . | Companion (0) -&gt; ALLY | Pet (1) -&gt; ALLY | Minion (2) -&gt; ENEMY | Boss (3) -&gt; ENEMY | NPC (4) -&gt; NEUTRAL | . _setup_rig . void _setup_rig() . Sets up entity’s rig: . | Assigns entity reference | Connects signals | Creates remote transforms | Builds mesh instances | Sets initial highlight state | . _setup_animations . void _setup_animations() . Sets up animation system: . | Sets up entity animation player | Configures animations | Starts idle animation | . _setup_stats . void _setup_stats() . Initializes stats container: . | Assigns entity reference | Sets up base stats | . _setup_ai . void _setup_ai() . Sets up AI system: . | Initializes AI state machine | Sets up combat script | . _setup_pet_container . void _setup_pet_container() . Initializes pet system: . | Sets up leader | Configures follower system | . setup_nameplate . void setup_nameplate() . Sets up entity’s nameplate and initializes debug display. _setup_effects . void _setup_effects() . Initializes effects container and assigns entity reference. _setup_immunities . void _setup_immunities() . Sets up immunity flags based on exported variables: . | Flee immunity | Incapacitate immunity | Disorient immunity | Root immunity | Silence immunity | Blind immunity | Cripple immunity | . _setup_ability_container . void _setup_ability_container() . Initializes ability container: . | Assigns user reference | Sets up node structure | Generates ability nodes | . face_direction . void face_direction(look_at_direction: Vector3) . Forces entity to face direction if does_not_face_direction is false. Parameters: . | look_at_direction: Vector3 - World position to face | . set_target . void set_target(new_target: Entity) . Sets current target if not target_locked: . | Updates target reference | Updates target position | Emits target update signal | Updates player target if needed | . Parameters: . | new_target: Entity - New target entity | . animation_finished . void animation_finished(_animation: String) . Handles animation completion: . | Sets animation speed | Plays appropriate idle animation | . Parameters: . | _animation: String - Completed animation name | . change_combat_state . void change_combat_state(value: bool) . Changes combat state and emits signal. Parameters: . | value: bool - New combat state | . die . void die() . Handles entity death: . | Sets dead state | Stops movement/combat | Removes effects/collision | Plays death animation | Updates UI | Emits signals | . _on_entity_taken_damage . void _on_entity_taken_damage(damage_taken: int, is_tick_damage: bool, was_crit: bool) . Processes damage taken: . | Displays damage numbers | Plays audio/animations | Updates combat state | . Parameters: . | damage_taken: int - Amount of damage | is_tick_damage: bool - If from periodic effect | was_crit: bool - If critical hit | . cast_interrupted . void cast_interrupted() . Interrupts current cast if interruptible: . | Checks interrupt shield | Cancels cast if appropriate | Emits interrupt signal | . stop_cast . void stop_cast() . Forces immediate cast stop regardless of interrupt protection. entity_fleed . void entity_fleed() . Applies flee effect: . | Sets flee state | Applies immunity | Starts timer | Plays animation | . flee_immune_timer_end . void flee_immune_timer_end() . Ends flee immunity timer and removes immunity. entity_disorientated . void entity_disorientated() . Applies disorient effect: . | Sets disorient state | Applies immunity | Starts timer | Plays animation | . disorient_immune_timer_end . void disorient_immune_timer_end() . Ends disorient immunity timer and removes immunity. entity_rooted . void entity_rooted() . Applies root effect: . | Sets root state | Applies immunity | Starts timer | . rooted_immune_timer_end . void rooted_immune_timer_end() . Ends root immunity timer and removes immunity. entity_silanced . void entity_silanced() . Applies silence effect: . | Sets silence state | Applies immunity | Starts timer | . silance_immune_timer_end . void silance_immune_timer_end() . Ends silence immunity timer and removes immunity. entity_blinded . void entity_blinded() . Applies blind effect: . | Sets blind state | Applies immunity | Starts timer | . blind_immune_timer_end . void blind_immune_timer_end() . Ends blind immunity timer and removes immunity. entity_crippled . void entity_crippled() . Applies cripple effect: . | Sets cripple state | Applies immunity | Starts timer | . cripple_immune_timer_end . void cripple_immune_timer_end() . Ends cripple immunity timer and removes immunity. set_current_target_on . void set_current_target_on() . Highlights entity as current target: . | Updates nameplate border | Shows target marker | . set_current_target_off . void set_current_target_off() . Removes current target highlight: . | Resets nameplate border | Hides target marker | . debug_display . void debug_display() . Toggles debug display based on GameManager debug mode. connect_to_effect . void connect_to_effect(ability_id: int, effect_id: int, start_callback: Callable, end_callback: Callable) . Connects callbacks to specific effects. Parameters: . | ability_id: int - Ability containing effect | effect_id: int - Effect to connect | start_callback: Callable - Effect start callback | end_callback: Callable - Effect end callback | . _on_tree_exiting . void _on_tree_exiting() . Handles cleanup when entity is removed from scene. Emits entity_being_set_free signal. ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/#method-descriptions",
    
    "relUrl": "/systems/entities/entity-class/#method-descriptions"
  },"88": {
    "doc": "Equipment Data",
    "title": "Equipment Inventory Data",
    "content": "Inherits: Node . ",
    "url": "/dungeoneers-docs/systems/entities/equipment-data/#equipment-inventory-data",
    
    "relUrl": "/systems/entities/equipment-data/#equipment-inventory-data"
  },"89": {
    "doc": "Equipment Data",
    "title": "Description",
    "content": "EquipmentInventoryData manages the equipment inventory for an entity, including all equippable slots and their contents. It handles operations such as equipping, unequipping, and interacting with equipment items. Key features: . | Manages various equipment slots (helm, chest, legs, etc.) | . ",
    "url": "/dungeoneers-docs/systems/entities/equipment-data/#description",
    
    "relUrl": "/systems/entities/equipment-data/#description"
  },"90": {
    "doc": "Equipment Data",
    "title": "Equipment Data",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/equipment-data/",
    
    "relUrl": "/systems/entities/equipment-data/"
  },"91": {
    "doc": "Minion Class",
    "title": "Minion Entity Class",
    "content": "Inherits: Entity . ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/minion#minion-entity-class",
    
    "relUrl": "/systems/entities/entity-class/minion#minion-entity-class"
  },"92": {
    "doc": "Minion Class",
    "title": "Minion Class",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/minion",
    
    "relUrl": "/systems/entities/entity-class/minion"
  },"93": {
    "doc": "Movement State",
    "title": "Incompacitated State",
    "content": "Inherits: State . ",
    "url": "/dungeoneers-docs/systems/entities/ai/movement-state#incompacitated-state",
    
    "relUrl": "/systems/entities/ai/movement-state#incompacitated-state"
  },"94": {
    "doc": "Movement State",
    "title": "Description",
    "content": "MovementState is a base class for states that involve entity movement. It provides common functionality for handling movement, gravity, and animations. Key features: . | Applies gravity to the entity | Handles basic movement logic | Manages movement animations | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/movement-state#description",
    
    "relUrl": "/systems/entities/ai/movement-state#description"
  },"95": {
    "doc": "Movement State",
    "title": "Movement State",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/ai/movement-state",
    
    "relUrl": "/systems/entities/ai/movement-state"
  },"96": {
    "doc": "Passive Ability",
    "title": "Passive Ability",
    "content": " ",
    "url": "/dungeoneers-docs/systems/abilities-effects/ability/passive-ability",
    
    "relUrl": "/systems/abilities-effects/ability/passive-ability"
  },"97": {
    "doc": "Patrolling State",
    "title": "Patrolling State",
    "content": "Inherits: State . ",
    "url": "/dungeoneers-docs/systems/entities/ai/patrolling-state",
    
    "relUrl": "/systems/entities/ai/patrolling-state"
  },"98": {
    "doc": "Patrolling State",
    "title": "Description",
    "content": "PatrollingState represents the behavior of an entity following a predefined patrol path. It manages the entity’s movement between patrol points and handles transitions to other states. Key features: . | Controls the entity’s movement along a patrol path | Manages transitions between patrol points | Handles combat interruptions and returns to patrolling after combat | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/patrolling-state#description",
    
    "relUrl": "/systems/entities/ai/patrolling-state#description"
  },"99": {
    "doc": "Pet Class",
    "title": "Pet Entity Class",
    "content": "Inherits: Entity . ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/pet#pet-entity-class",
    
    "relUrl": "/systems/entities/entity-class/pet#pet-entity-class"
  },"100": {
    "doc": "Pet Class",
    "title": "Pet Class",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/entity-class/pet",
    
    "relUrl": "/systems/entities/entity-class/pet"
  },"101": {
    "doc": "Player Command State",
    "title": "Player Command State",
    "content": "Inherits: State . ",
    "url": "/dungeoneers-docs/systems/entities/ai/player-command-state",
    
    "relUrl": "/systems/entities/ai/player-command-state"
  },"102": {
    "doc": "Player Command State",
    "title": "Description",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/ai/player-command-state#description",
    
    "relUrl": "/systems/entities/ai/player-command-state#description"
  },"103": {
    "doc": "Running State",
    "title": "Running State",
    "content": "Inherits: MovementState . ",
    "url": "/dungeoneers-docs/systems/entities/ai/running-state",
    
    "relUrl": "/systems/entities/ai/running-state"
  },"104": {
    "doc": "Running State",
    "title": "Description",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/ai/running-state#description",
    
    "relUrl": "/systems/entities/ai/running-state#description"
  },"105": {
    "doc": "State Machine",
    "title": "Target Search State",
    "content": "Inherits: Node . ",
    "url": "/dungeoneers-docs/systems/entities/ai/state-machine#target-search-state",
    
    "relUrl": "/systems/entities/ai/state-machine#target-search-state"
  },"106": {
    "doc": "State Machine",
    "title": "Description",
    "content": "StateMachine manages the state system for entities in the game. It handles transitions between different movement and action states, coordinates AI behavior, and manages combat interactions. Key features: . | Manages separate movement and action states | Dynamically creates state nodes based on configuration | Handles state transitions and updates | Coordinates with combat scripts for AI behavior | Manages detection areas for entity interactions | Provides flexibility for different entity types (e.g., companions, bosses) | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/state-machine#description",
    
    "relUrl": "/systems/entities/ai/state-machine#description"
  },"107": {
    "doc": "State Machine",
    "title": "State Machine",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/ai/state-machine",
    
    "relUrl": "/systems/entities/ai/state-machine"
  },"108": {
    "doc": "State",
    "title": "Target Search State",
    "content": "Inherits: Node . ",
    "url": "/dungeoneers-docs/systems/entities/ai/state#target-search-state",
    
    "relUrl": "/systems/entities/ai/state#target-search-state"
  },"109": {
    "doc": "State",
    "title": "Description",
    "content": "State is the base class for all states in the game’s state machine system. It defines the interface and basic functionality that all states should implement. Specific states will inherit from this class and override its methods as needed. Key features: . | Provides a common interface for all states | Holds references to the state machine and the entity it’s controlling | Defines basic methods for state entry, exit, update, and input handling | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/state#description",
    
    "relUrl": "/systems/entities/ai/state#description"
  },"110": {
    "doc": "State",
    "title": "State",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/ai/state",
    
    "relUrl": "/systems/entities/ai/state"
  },"111": {
    "doc": "Target Search State",
    "title": "Target Search State",
    "content": "Inherits: State . ",
    "url": "/dungeoneers-docs/systems/entities/ai/target-search-state",
    
    "relUrl": "/systems/entities/ai/target-search-state"
  },"112": {
    "doc": "Target Search State",
    "title": "Description",
    "content": "TargetSearchState represents the behavior of an entity actively searching for a target. It manages the process of finding and selecting targets, and handles transitions to other states. Key features: . | Implements target search logic for different entity types (e.g., Minion, Boss, Companion) | Manages aggro tables for certain entity types | Handles combat entrance and exit | . ",
    "url": "/dungeoneers-docs/systems/entities/ai/target-search-state#description",
    
    "relUrl": "/systems/entities/ai/target-search-state#description"
  },"113": {
    "doc": "Walking State",
    "title": "Walking State",
    "content": "Inherits: MovementState . ",
    "url": "/dungeoneers-docs/systems/entities/ai/walking-state",
    
    "relUrl": "/systems/entities/ai/walking-state"
  },"114": {
    "doc": "Walking State",
    "title": "Description",
    "content": " ",
    "url": "/dungeoneers-docs/systems/entities/ai/walking-state#description",
    
    "relUrl": "/systems/entities/ai/walking-state#description"
  },"115": {
    "doc": "World Building Tools",
    "title": "World Building Tools",
    "content": " ",
    "url": "/dungeoneers-docs/systems/world-building/",
    
    "relUrl": "/systems/world-building/"
  },"116": {
    "doc": "World Building Tools",
    "title": "Overview",
    "content": "Tools and systems for generating and managing game worlds. ",
    "url": "/dungeoneers-docs/systems/world-building/#overview",
    
    "relUrl": "/systems/world-building/#overview"
  },"117": {
    "doc": "World Building Tools",
    "title": "Components",
    "content": ". | World Generator | Map System | Environment Management | . ",
    "url": "/dungeoneers-docs/systems/world-building/#components",
    
    "relUrl": "/systems/world-building/#components"
  },"118": {
    "doc": "World Building Tools",
    "title": "Implementation Details",
    "content": "[Documentation to be added] . ",
    "url": "/dungeoneers-docs/systems/world-building/#implementation-details",
    
    "relUrl": "/systems/world-building/#implementation-details"
  },"119": {
    "doc": "World Building Tools",
    "title": "Examples",
    "content": "[Code examples to be added] . ",
    "url": "/dungeoneers-docs/systems/world-building/#examples",
    
    "relUrl": "/systems/world-building/#examples"
  }
}
